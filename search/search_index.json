{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COEN 278 Advanced Web Programming - Santa Clara University Current Building Status Information Code: COEN 278 Term: 2019 Spring Instructor: Yuan Wang Textbook: Agile Web Development with Rails 6 Prerequisite: Syllabus High level structure Web application development overall Server side programming using Ruby to create web related applications for example, we will use Ruby to write web server Using frameworks to create web applications We will be using two: Sinatra, Ruby on Rails Other issues (i.e. security) Other languages and frameworks. Docker Ruby CGI server image A docker image for Ruby CGI server.","title":"Introduction"},{"location":"#coen-278-advanced-web-programming-santa-clara-university","text":"","title":"COEN 278 Advanced Web Programming - Santa Clara University"},{"location":"#current-building-status","text":"","title":"Current Building Status"},{"location":"#information","text":"Code: COEN 278 Term: 2019 Spring Instructor: Yuan Wang Textbook: Agile Web Development with Rails 6 Prerequisite:","title":"Information"},{"location":"#syllabus","text":"High level structure Web application development overall Server side programming using Ruby to create web related applications for example, we will use Ruby to write web server Using frameworks to create web applications We will be using two: Sinatra, Ruby on Rails Other issues (i.e. security) Other languages and frameworks.","title":"Syllabus"},{"location":"#docker-ruby-cgi-server-image","text":"A docker image for Ruby CGI server.","title":"Docker Ruby CGI server image"},{"location":"01-web-programming-overall/","text":"Web Programming Overall","title":"Web Programming Overall"},{"location":"01-web-programming-overall/#web-programming-overall","text":"","title":"Web Programming Overall"},{"location":"02-ruby/","text":"Ruby History and fundamentals Ruby Parent: Yukihiro \"Matz\" Matsumoto Age: 1995 - now Used in System Admin: automation script Web programming Programming paradigm: Ruby can do all (need further explanation) Procedural: data and functions not associated Functional: anonymous functions Object oriented: data and algorithms are associated class based: instantiate prototype based: clone Installation Method 1: Docker Download THIS Dockerfile and run the following script. [ tag ] is the tag name for image, whose format is name : version , eg. ruby : 2.5 . 1 1 2 3 4 ``` sh docker build - f ruby . dockerfile - t [ tag ] . docker run - it tag ``` Method 2: installation in the system Reference: official Ruby website Environment irb : interactive Ruby .rb : Ruby program Basics Glance of Ruby Structure Methods definitions Statements that call methods Classes with methods Statements that create objects Other statements ??? example \"MyClass.rb\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ``` ruby tab = \" Ruby \" class MyClass # define a class def initialize ( var ) # constructor method @ var = var end def my_method # instance method p \" instance var is #{@var} \" end end obj = MyClass . new ( 3 ) obj . my_method ``` Data Structure Everything is a object Numeric Integer 1 . even ? , 1 . odd ? , 1 . zero ? , 1 . abs : ? belongs to methods names. 23456 . chr ( Encoding :: UTF_8 ) default encoding in ASCII . next , .succ same. to_s ( system ) to string, default in decimal system Iterate methods 5 . times { | x | p x } : transfer 0-4 into block as x 5 . upto ( 10 ) { | x | p x } : transfer 5-10 into block as x 5 . downto ( 1 ) { | x | p x } : transfer 5-1 into block as x 1 2 3 4 5 6 7 8 9 10 11 # Decimal 123 , 0 d123 , 408_345_6789 # binary 0b100111 # octal 0123 m 0 o123 # hex 0x7B Float 1 2 3 # Decimal 0 . 123 e2 # 12.3 123 e - 1 # 12.3 Rational Complex Get class 1 2 3 # Decimal p \"\" . class p 1 . class Range Format: ( 1 .. 5 ) or Range . new ( 1 , 5 , false ) : include the end value ( 1 ... 5 ) or Range . new ( 1 , 5 , true ) not include the end value Method ( 1 .. 5 ) . end == ( 1 ... 5 ) . end , ( 1 .. 5 ). begin == ( 1 ... 5 ). begin : although the later not include the end point. ( 1 ... 5 ). exclude_end ? => true .cover ? ( e ) or . include ? ( e ) , return true if e INCLUDED IN RANGE (no need to be explicit) ( 1 .. 5 ). cover ? ( 2 . 5 ) => true ( \u2018 car \u2019..\u2019 cat \u2019 ) . include ? ( \u2018 cas \u2019 ) => true .first ( n ) , .last ( n ) Element number .count .size not work for non integer sequence. (..). step ( n ) : same as range ( start , end , step ) in Python. .min , .max Iterative: provides each element to iterative blocks 1 ( 1 .. 10 ) . each { | x | p x , '-' } or 1 2 3 ( 1 .. 10 ) . each do | x | p x , '-' end is the same to 1 2 3 for x in ( 1 .. 10 ) do p x , '-' end String Format: Quote: only double quoted string will be parsed % Followed by Q {} or one in {} , ( ), < > , [ ], / / , * * , # # , ! ! , @@ , && , ^^ , ++ , - - , | | , : :, ; ; % % will be parse. Followed by a pair of q {} won't be parsed. Convenient when contents includes quote marks. 1 2 3 4 5 6 7 str1 = 'a string \\n' # => \"1 + 1 is \\#{1+1}\" str2 = '1 + 1 is #{1+1}' # => \"1 + 1 is \\#{1+1}\" str2 = %q{1 + 1 is #{1+1}} # => \"1 + 1 is \\#{1+1}\" str3 = \"a string \\n \" # => \"1 + 1 is 2\" str4 = '1 + 1 is #{1+1}' # => \"1 + 1 is 2\" str2 = %Q{1 + 1 is #{ 1 + 1 } } # => \"1 + 1 is 2\" str5 = String . new ( \"another string\" ) Here document (show as it is) 1 2 3 4 x = << END_MARK Contents Contents END_MARK ??? note \" puts vs. p \" Methods Concatenation << : same as + . 1 2 3 4 5 \"i love you \" + \"forever\" # \"i love you forever\" \"i love you \"\"forever\" # \"i love you forever\" \"over \" * 3 + \" again\" # \"over over over again\" a = \"i love you\" a << \"r money\" # \"i love your money\" <=> operator: returns -1, 0, or 1 for < , = , and > correspondingly. 1 2 3 \"1\" < \"2\" # -1 \"1\" < \"1\" # 0 \"2\" < \"1\" # 1 Slicing 1 2 3 4 5 6 a = \"0123456\" a [ 0 ] # \"0\" a [ 2 , 5 ] # start from 2, 5 elements a [ 2 .. 5 ] # \"2345\" a [ 2 ... 5 ] # \"234\" a . length # 7 Iterative: provides each character to iterative blocks 1 \"iloveyou\" . each_char { | x | print x , '-' } # i-l-o-v-e-y-o-u- Symbol Hash: 1 2 person [ :name ] = 'yuan' person [ 'name' ] = 'yuan' # NOT same as above Method arg 1 2 3 4 5 6 7 8 9 class Test def tmp puts \"symbol method\" end end myObj = Test . new () m = :tmp obj . method ( m ) . call # => \"symbol method\" Containers Array Similar to Python list , can have diff types of element. Wired Week 1-2 slide 11 a [ 2 , 5 ] Week 1-2 slide 22 [: name ] and [ 'name' ] TBD include : add everything belongs to the included class/module (class var, inst method, module const) extend : add inst method as class method (extend it to single subclass) Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Ruby Language"},{"location":"02-ruby/#ruby","text":"","title":"Ruby"},{"location":"02-ruby/#history-and-fundamentals","text":"Ruby Parent: Yukihiro \"Matz\" Matsumoto Age: 1995 - now Used in System Admin: automation script Web programming Programming paradigm: Ruby can do all (need further explanation) Procedural: data and functions not associated Functional: anonymous functions Object oriented: data and algorithms are associated class based: instantiate prototype based: clone","title":"History and fundamentals"},{"location":"02-ruby/#installation","text":"","title":"Installation"},{"location":"02-ruby/#method-1-docker","text":"Download THIS Dockerfile and run the following script. [ tag ] is the tag name for image, whose format is name : version , eg. ruby : 2.5 . 1 1 2 3 4 ``` sh docker build - f ruby . dockerfile - t [ tag ] . docker run - it tag ```","title":"Method 1: Docker"},{"location":"02-ruby/#method-2-installation-in-the-system","text":"Reference: official Ruby website","title":"Method 2: installation in the system"},{"location":"02-ruby/#environment","text":"irb : interactive Ruby .rb : Ruby program","title":"Environment"},{"location":"02-ruby/#basics","text":"","title":"Basics"},{"location":"02-ruby/#glance-of-ruby","text":"Structure Methods definitions Statements that call methods Classes with methods Statements that create objects Other statements ??? example \"MyClass.rb\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ``` ruby tab = \" Ruby \" class MyClass # define a class def initialize ( var ) # constructor method @ var = var end def my_method # instance method p \" instance var is #{@var} \" end end obj = MyClass . new ( 3 ) obj . my_method ```","title":"Glance of Ruby"},{"location":"02-ruby/#data-structure","text":"Everything is a object","title":"Data Structure"},{"location":"02-ruby/#numeric","text":"Integer 1 . even ? , 1 . odd ? , 1 . zero ? , 1 . abs : ? belongs to methods names. 23456 . chr ( Encoding :: UTF_8 ) default encoding in ASCII . next , .succ same. to_s ( system ) to string, default in decimal system Iterate methods 5 . times { | x | p x } : transfer 0-4 into block as x 5 . upto ( 10 ) { | x | p x } : transfer 5-10 into block as x 5 . downto ( 1 ) { | x | p x } : transfer 5-1 into block as x 1 2 3 4 5 6 7 8 9 10 11 # Decimal 123 , 0 d123 , 408_345_6789 # binary 0b100111 # octal 0123 m 0 o123 # hex 0x7B Float 1 2 3 # Decimal 0 . 123 e2 # 12.3 123 e - 1 # 12.3 Rational Complex Get class 1 2 3 # Decimal p \"\" . class p 1 . class","title":"Numeric"},{"location":"02-ruby/#range","text":"Format: ( 1 .. 5 ) or Range . new ( 1 , 5 , false ) : include the end value ( 1 ... 5 ) or Range . new ( 1 , 5 , true ) not include the end value Method ( 1 .. 5 ) . end == ( 1 ... 5 ) . end , ( 1 .. 5 ). begin == ( 1 ... 5 ). begin : although the later not include the end point. ( 1 ... 5 ). exclude_end ? => true .cover ? ( e ) or . include ? ( e ) , return true if e INCLUDED IN RANGE (no need to be explicit) ( 1 .. 5 ). cover ? ( 2 . 5 ) => true ( \u2018 car \u2019..\u2019 cat \u2019 ) . include ? ( \u2018 cas \u2019 ) => true .first ( n ) , .last ( n ) Element number .count .size not work for non integer sequence. (..). step ( n ) : same as range ( start , end , step ) in Python. .min , .max Iterative: provides each element to iterative blocks 1 ( 1 .. 10 ) . each { | x | p x , '-' } or 1 2 3 ( 1 .. 10 ) . each do | x | p x , '-' end is the same to 1 2 3 for x in ( 1 .. 10 ) do p x , '-' end","title":"Range"},{"location":"02-ruby/#string","text":"Format: Quote: only double quoted string will be parsed % Followed by Q {} or one in {} , ( ), < > , [ ], / / , * * , # # , ! ! , @@ , && , ^^ , ++ , - - , | | , : :, ; ; % % will be parse. Followed by a pair of q {} won't be parsed. Convenient when contents includes quote marks. 1 2 3 4 5 6 7 str1 = 'a string \\n' # => \"1 + 1 is \\#{1+1}\" str2 = '1 + 1 is #{1+1}' # => \"1 + 1 is \\#{1+1}\" str2 = %q{1 + 1 is #{1+1}} # => \"1 + 1 is \\#{1+1}\" str3 = \"a string \\n \" # => \"1 + 1 is 2\" str4 = '1 + 1 is #{1+1}' # => \"1 + 1 is 2\" str2 = %Q{1 + 1 is #{ 1 + 1 } } # => \"1 + 1 is 2\" str5 = String . new ( \"another string\" ) Here document (show as it is) 1 2 3 4 x = << END_MARK Contents Contents END_MARK ??? note \" puts vs. p \" Methods Concatenation << : same as + . 1 2 3 4 5 \"i love you \" + \"forever\" # \"i love you forever\" \"i love you \"\"forever\" # \"i love you forever\" \"over \" * 3 + \" again\" # \"over over over again\" a = \"i love you\" a << \"r money\" # \"i love your money\" <=> operator: returns -1, 0, or 1 for < , = , and > correspondingly. 1 2 3 \"1\" < \"2\" # -1 \"1\" < \"1\" # 0 \"2\" < \"1\" # 1 Slicing 1 2 3 4 5 6 a = \"0123456\" a [ 0 ] # \"0\" a [ 2 , 5 ] # start from 2, 5 elements a [ 2 .. 5 ] # \"2345\" a [ 2 ... 5 ] # \"234\" a . length # 7 Iterative: provides each character to iterative blocks 1 \"iloveyou\" . each_char { | x | print x , '-' } # i-l-o-v-e-y-o-u-","title":"String"},{"location":"02-ruby/#symbol","text":"Hash: 1 2 person [ :name ] = 'yuan' person [ 'name' ] = 'yuan' # NOT same as above Method arg 1 2 3 4 5 6 7 8 9 class Test def tmp puts \"symbol method\" end end myObj = Test . new () m = :tmp obj . method ( m ) . call # => \"symbol method\"","title":"Symbol"},{"location":"02-ruby/#containers","text":"","title":"Containers"},{"location":"02-ruby/#array","text":"Similar to Python list , can have diff types of element.","title":"Array"},{"location":"02-ruby/#wired","text":"Week 1-2 slide 11 a [ 2 , 5 ] Week 1-2 slide 22 [: name ] and [ 'name' ]","title":"Wired"},{"location":"02-ruby/#tbd","text":"include : add everything belongs to the included class/module (class var, inst method, module const) extend : add inst method as class method (extend it to single subclass) Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"TBD"},{"location":"03-socket/","text":"Web Server Socket Hierarchy: Web app -> HTTP -> TCP/IP (Layer 4 -> transport layer) Ruby socket (std-lib) -> standard socket API (Berkeley/POSIX Sockets) Inheritance: TCPSocket -> IPSocket -> Socket -> BasicSocket -> IO Server (Listener) Structure: Create -> Bind -> Listen -> Accept -> Close -> Listen 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 require 'socket' # include socket in standard library # Step 1: Create sock_serv = Socket . new ( domain , # :INET => IPv4, :INET6 => IPv6, :UNIX => Unix Socket socket_type # :STREAM => TCP, DGRAM => UDP, RAW => ? ) # Step 2: Bind addr = Socket . pack_sockaddr_in { port , # int, (1025..48999) ip_addr # str, host machine } sock_serv . bind ( addr ) # Step 3: Listen (only for stream-oriented mode) sock_serv . listen ( n ) # int, max num of conn, default 5, (1..Socket::SOMAXCONN) puts \"Listening from host #{ ip_addr } at port #{ port } ...\" # Step 4: Accept -> Close loop loop do conn = sock_serv . accept conn . close end Syntax sugar Combine Create -> Bind -> Listen 1 2 3 4 5 6 7 8 9 10 11 require 'socket' # include socket in standard library sock_serv = TCPServer . new ( # TCPServer.listen(n) to chang conn, default 5 ip_addr # str, host machine, default \"127.0.0.1\" port , # int, (1025..48999) ) # server = Socket.tcp_server_sockets(port) # same, default at localhost Socket . accept_loop ( sock_serv ) do | conn | conn . close # next conn won't accepted until the block returns. end # Use Thread for multiple clients \u221a Wrap all steps 1 2 3 4 5 require 'socket' Socket . tcp_server_sockets ( host = nil , port ) do | conn | conn . close end Client (Initate) Structure: Create -> Connect -> Close 1 2 3 4 5 6 7 8 9 10 11 12 13 14 require 'socket' # include socket in standard library # Step 1: Create (same as server) sock_clnt = Socket . new ( domain , # :INET => IPv4, :INET6 => IPv6, :UNIX => Unix Socket socket_type # :STREAM => TCP, DGRAM => UDP, RAW => ? ) # Step 2: Connect serv_addr = sock_clnt . pack_sockaddr_in { port , # int, (1025..48999) ip_addr # str, host machine } sock_clnt . connect ( serv_addr ) Syntax sugar: wrap all steps 1 2 3 4 5 6 require 'socket' sock_clnt = TCPSocket . new ( ip_addr # str, target server port , # int, (1025..48999) ) Web Server Socket connection -> file \"Read\" socket 1 2 3 4 5 6 require 'socket' Socket . tcp_server_loop ( 1234 ) do | conn | puts conn . gets conn . close end \"Write\" socket 1 2 3 4 require 'socket' sock_clnt = TCPSocket . new ( \"localhost\" , 1234 ) sock_clnt . write ( str ) HTTP request Header 1 2 3 4 5 6 GET /hello.htm HTTP / 1.1 User-Agent : Mozilla/4.0 (compatible; MSIE5.0; Windows NT) Host : www.tutorialpoint.com Accept-Language : en-us Accept-Encoding : gzip, deflate Connection : Keep-Alive HTTP Response Header 1 2 3 4 5 6 GET /hello.htm HTTP / 1.1 User-Agent : Mozilla/4.0 (compatible; MSIE5.0; Windows NT) Host : www.tutorialpoint.com Accept-Language : en-us Accept-Encoding : gzip, deflate Connection : Keep-Alive Web Client Net::HTTP library 1 2 3 4 5 6 7 8 9 10 11 12 13 14 require 'net/http' site - %{domainName.com} path = \"/\" response = Net :: HTTP . get_response ( site , path ) puts \"Code = #{ response . code } \" puts \"Message = #{ response . message } \" response . each do | key , value | printf \"%-15s = %-100s \\n \" , key , value end p response . body [ 0 , 500 ] open-uri library 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 require 'open-uri' site = %{domainName.com} open ( site ) do | f | puts \"URI: #{ f . base_uri } \" puts \"Content_type: #{ f . content_type } \" puts \"Charset: #{ f . charset } \" puts \"Encoding: #{ f . content_encoding } \" puts \"Last modified: #{ f . last_modified } \" puts \"Status: #{ f . status . inspect } \" puts puts \"----- body -----\" 20 . times { | n | puts \" #{ n } : #{ f . gets } \" } end","title":"Ruby Socket Programming"},{"location":"03-socket/#web-server","text":"","title":"Web Server"},{"location":"03-socket/#socket","text":"Hierarchy: Web app -> HTTP -> TCP/IP (Layer 4 -> transport layer) Ruby socket (std-lib) -> standard socket API (Berkeley/POSIX Sockets) Inheritance: TCPSocket -> IPSocket -> Socket -> BasicSocket -> IO Server (Listener) Structure: Create -> Bind -> Listen -> Accept -> Close -> Listen 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 require 'socket' # include socket in standard library # Step 1: Create sock_serv = Socket . new ( domain , # :INET => IPv4, :INET6 => IPv6, :UNIX => Unix Socket socket_type # :STREAM => TCP, DGRAM => UDP, RAW => ? ) # Step 2: Bind addr = Socket . pack_sockaddr_in { port , # int, (1025..48999) ip_addr # str, host machine } sock_serv . bind ( addr ) # Step 3: Listen (only for stream-oriented mode) sock_serv . listen ( n ) # int, max num of conn, default 5, (1..Socket::SOMAXCONN) puts \"Listening from host #{ ip_addr } at port #{ port } ...\" # Step 4: Accept -> Close loop loop do conn = sock_serv . accept conn . close end Syntax sugar Combine Create -> Bind -> Listen 1 2 3 4 5 6 7 8 9 10 11 require 'socket' # include socket in standard library sock_serv = TCPServer . new ( # TCPServer.listen(n) to chang conn, default 5 ip_addr # str, host machine, default \"127.0.0.1\" port , # int, (1025..48999) ) # server = Socket.tcp_server_sockets(port) # same, default at localhost Socket . accept_loop ( sock_serv ) do | conn | conn . close # next conn won't accepted until the block returns. end # Use Thread for multiple clients \u221a Wrap all steps 1 2 3 4 5 require 'socket' Socket . tcp_server_sockets ( host = nil , port ) do | conn | conn . close end Client (Initate) Structure: Create -> Connect -> Close 1 2 3 4 5 6 7 8 9 10 11 12 13 14 require 'socket' # include socket in standard library # Step 1: Create (same as server) sock_clnt = Socket . new ( domain , # :INET => IPv4, :INET6 => IPv6, :UNIX => Unix Socket socket_type # :STREAM => TCP, DGRAM => UDP, RAW => ? ) # Step 2: Connect serv_addr = sock_clnt . pack_sockaddr_in { port , # int, (1025..48999) ip_addr # str, host machine } sock_clnt . connect ( serv_addr ) Syntax sugar: wrap all steps 1 2 3 4 5 6 require 'socket' sock_clnt = TCPSocket . new ( ip_addr # str, target server port , # int, (1025..48999) )","title":"Socket"},{"location":"03-socket/#web-server_1","text":"Socket connection -> file \"Read\" socket 1 2 3 4 5 6 require 'socket' Socket . tcp_server_loop ( 1234 ) do | conn | puts conn . gets conn . close end \"Write\" socket 1 2 3 4 require 'socket' sock_clnt = TCPSocket . new ( \"localhost\" , 1234 ) sock_clnt . write ( str ) HTTP request Header 1 2 3 4 5 6 GET /hello.htm HTTP / 1.1 User-Agent : Mozilla/4.0 (compatible; MSIE5.0; Windows NT) Host : www.tutorialpoint.com Accept-Language : en-us Accept-Encoding : gzip, deflate Connection : Keep-Alive HTTP Response Header 1 2 3 4 5 6 GET /hello.htm HTTP / 1.1 User-Agent : Mozilla/4.0 (compatible; MSIE5.0; Windows NT) Host : www.tutorialpoint.com Accept-Language : en-us Accept-Encoding : gzip, deflate Connection : Keep-Alive","title":"Web Server"},{"location":"03-socket/#web-client","text":"Net::HTTP library 1 2 3 4 5 6 7 8 9 10 11 12 13 14 require 'net/http' site - %{domainName.com} path = \"/\" response = Net :: HTTP . get_response ( site , path ) puts \"Code = #{ response . code } \" puts \"Message = #{ response . message } \" response . each do | key , value | printf \"%-15s = %-100s \\n \" , key , value end p response . body [ 0 , 500 ] open-uri library 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 require 'open-uri' site = %{domainName.com} open ( site ) do | f | puts \"URI: #{ f . base_uri } \" puts \"Content_type: #{ f . content_type } \" puts \"Charset: #{ f . charset } \" puts \"Encoding: #{ f . content_encoding } \" puts \"Last modified: #{ f . last_modified } \" puts \"Status: #{ f . status . inspect } \" puts puts \"----- body -----\" 20 . times { | n | puts \" #{ n } : #{ f . gets } \" } end","title":"Web Client"},{"location":"04-cgi/","text":"CGI - Common Gateway Interface Apache2 Server Docker Ruby CGI Image Download cgi-ruby.dockerfile and run the following script in the same folder. cgi - ruby is the name for the image, change it if you want to. 1 docker build -f cgi-ruby.dockerfile -t cgi-ruby . Start Apache2 server and load current directory in docker as cgi - bin folder Windows CMD 1 docker run -dit -p 80 :80 -v \"%cd%\" :/usr/lib/cgi-bin -w /usr/lib/cgi-bin cgi-ruby Linux & Windows PowerShell 1 docker run -dit -p 80 :80 -v ${ pwd } :/usr/lib/cgi-bin -w /usr/lib/cgi-bin cgi-ruby OS X 1 docker run -dit -p 80 :80 -v $PWD :/usr/lib/cgi-bin -w /usr/lib/cgi-bin cgi-ruby Now you can access .rb script by access http : // localhost / cgi - bin /[ filename ] . rb , the page will be rendered dynamically at the moment you modify the .rb script.","title":"Ruby CGI"},{"location":"04-cgi/#cgi-common-gateway-interface","text":"","title":"CGI - Common Gateway Interface"},{"location":"04-cgi/#apache2-server-docker-ruby-cgi-image","text":"Download cgi-ruby.dockerfile and run the following script in the same folder. cgi - ruby is the name for the image, change it if you want to. 1 docker build -f cgi-ruby.dockerfile -t cgi-ruby . Start Apache2 server and load current directory in docker as cgi - bin folder Windows CMD 1 docker run -dit -p 80 :80 -v \"%cd%\" :/usr/lib/cgi-bin -w /usr/lib/cgi-bin cgi-ruby Linux & Windows PowerShell 1 docker run -dit -p 80 :80 -v ${ pwd } :/usr/lib/cgi-bin -w /usr/lib/cgi-bin cgi-ruby OS X 1 docker run -dit -p 80 :80 -v $PWD :/usr/lib/cgi-bin -w /usr/lib/cgi-bin cgi-ruby Now you can access .rb script by access http : // localhost / cgi - bin /[ filename ] . rb , the page will be rendered dynamically at the moment you modify the .rb script.","title":"Apache2 Server Docker Ruby CGI Image"},{"location":"2019-04-11/","text":"Ruby Recap variable length 1 2 3 def m ( a , b , * c ) puts \" #{ a } , #{ b } , #[c]\" end m 1 , 2 , 3 , 4 and m 1 , * [ 2 , 3 , 4 ] are the same. keyword params 1 2 3 def search ( field , genre : \"pop\" , duration : 120 ) puts [ field , genre , duration ] end 1 2 3 search ( :title ) search ( :title , duration : 200 ) search ( :title , duration : 200 , genre : 200 ) all above are acceptable, but search (: title , duration : 200 , genre : 200 , other : \"somekthing\" ) will generate a key error collect addition args 1 2 3 4 5 def search ( field , * x , genre : \"pop\" , duration : 120 , ** rest ) puts [ field , genre , duration ] end search ( :title , 4 , \"love\" , \"you\" , duration : 200 , genre : 200 , other : \"somekthing\" ) 1 2 3 4 5 6 7 8 9 10 11 def m ( a , * b , ** c ) p [ a , b , c ] end m 10 m 10 , 20 , 30 m 10 , 20 , 30 , a : 1 , b : 2 h = { c : 3 , d : 4 } m = 10 , h , f : 5 # h as an obj, will be collected in b m = 10 , ** h , f : 5 # h flattened * collects whatever is left ** collects leftover hashes nested method: same as defined in top level, no scope restrictions (different from py), ACTUALLY NO NESTED METHOD, except for lambda. 1 2 3 4 5 6 7 8 9 10 11 12 13 def out_method def in_method1 p \"inside 1\" end def in_method2 p \"inside 2\" end p \"out method\" end outmethod in_method1 in_method2 Scope in Ruby method class module Operator as a method 1 2 3 4 x , y , z = 1 , 2 , 3 p ( x + y ) * z # 9 p ( x . + ( y )) . * z # 9 Alias 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def m \"orginal method\" end alias oldm m # rename original method as oldm def m \"another method\" end p m p oldm # ----------- class Integer alias ori_ * * # rename original method def * ( n ) # overwrite ori_ * ( n ) + 8 end end Chain method call ```ruby class MyClass def initialize @total = @count = 0 end 1 2 3 4 5 6 7 8 9 def << ( n ) @ total += n @ count += 1 self # return itself end def avarage Float ( @ total ) / @ count end end obj = Myclass.new p (obj << 34 << 42 << 560).average # add multiple numbers OO example Same as database design philosophy, class are columns, values are objects. A classs for bike: in ppt, separate part in separate files, call drive . rb automatically loads other two files. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # gear.rb class Gear def initialize ( chainring , cog , wheel = nil ) @chainring = chainring @cog = cog @wheel = wheel end def ratio @chainring / @cog . to_f end def gear_inches @wheel . diameter * ratio end end # wheel.rb class Wheel def initialize ( rim , tire ) @rim = rim # internal diameter @tire = tire # distance from internal ring to outer ring end def diameter @rim 2 * @tire end def circumference diameter * Math :: PI end end # drive.rb require_relative 'gear' # require in the same folder require_relative 'wheel' wheel = Wheel . new ( 26 , 2 ) p wheel . circumference g = Gear . new ( 25 , 10 , wheel ) p g . gear_inches Inheritance 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class MyClass def initialize @total = @count = 0 end def << ( n ) @total += n @count += 1 self # return itself end def avarage Float ( @total ) / @count end end class MySubClass < MyClass # inherit methods from a super class def sub_method p \"method of sub class\" end end obj = MySubClass . new obj . sub_method p ( obj << 34 << 42 << 560 ) . average p MySubClass . superclass # get name of upper level super class p MySubClass . ancestors # get a chain of super classes Super 1 2 3 4 5 6 7 8 9 10 11 12 13 class Greeting def greet \"Hello\" end end class WarmGreeting < Greeting def greet \"hey, #{ super } \" # call the same name method in the parent class end end p WarmGreeting . new . greet no way to specify the level within acestors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Vehicle attr_accessor :position def initialize ( n = 0 ) @position = n end def moving_forward ( n ) @position += n p \"moved forward: #{ @position } \" end end class Car < Vehicle def moving_forward ( n , m ) p \"VROOM!!!\" super ( n ) # call the same name method in the parent class end end obj = Car . new ( 0 ) obj . moving_forward ( 100 ) In Ruby, class itself is an object. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Class . new () class C def C . static1 \"static method\" end def self . static1 \"also static method\" end def method \"common instance method\" end end Instance variable and class variable [ ? ] 1 2 3 4 5 6 7 class C @var = 10 def initialize @var = 5 end end Singleton Method: method for one particular object only create an anonymous child class of original class class methods are all singleton 1 2 3 4 5 6 7 class MyClass class << self def cmethod \"A singleton method.\" end end end","title":"Ruby"},{"location":"2019-04-11/#ruby","text":"","title":"Ruby"},{"location":"2019-04-11/#recap","text":"variable length 1 2 3 def m ( a , b , * c ) puts \" #{ a } , #{ b } , #[c]\" end m 1 , 2 , 3 , 4 and m 1 , * [ 2 , 3 , 4 ] are the same. keyword params 1 2 3 def search ( field , genre : \"pop\" , duration : 120 ) puts [ field , genre , duration ] end 1 2 3 search ( :title ) search ( :title , duration : 200 ) search ( :title , duration : 200 , genre : 200 ) all above are acceptable, but search (: title , duration : 200 , genre : 200 , other : \"somekthing\" ) will generate a key error collect addition args 1 2 3 4 5 def search ( field , * x , genre : \"pop\" , duration : 120 , ** rest ) puts [ field , genre , duration ] end search ( :title , 4 , \"love\" , \"you\" , duration : 200 , genre : 200 , other : \"somekthing\" ) 1 2 3 4 5 6 7 8 9 10 11 def m ( a , * b , ** c ) p [ a , b , c ] end m 10 m 10 , 20 , 30 m 10 , 20 , 30 , a : 1 , b : 2 h = { c : 3 , d : 4 } m = 10 , h , f : 5 # h as an obj, will be collected in b m = 10 , ** h , f : 5 # h flattened * collects whatever is left ** collects leftover hashes","title":"Recap"},{"location":"2019-04-16/","text":"Ruby Module Def: Similar to a class, except without .new () no super class Creation Class -> myClass (pointer to Class) (super class) -> myObj (pointer to myClass) Module -> myModule (pointer to Class) (instance of Module class, singleton), no super class Item Module Class See the sildes Contents classes / modules constants module methods instance methods instance variables 1 2 3 4 5 6 module MyModule # like a name space for classes class MyClass def my_method end end end Reason to have classes Organize constants (including class and modules within) Provide collection of methods. As namespace Constant: Class / modules names Can be changed but will generate warnings. Scope: global, can be put in anywhere and accessed from anywhere using :: COSTANT_NAME Cannot defined inside instance method If multiple with same name, \"nearest\"(physically) one will be returned :: notation, for top ones Diff constant and variables: make a chart Function -> stack (This is the reason of scope) Scope: Enter a new scope: module class method p local_variables : get local variables in the current scope Module methods same as class method Instance methods in module: create sub class 1 2 3 4 5 6 7 8 9 10 11 module MyModule def my_method end end class MyClass include MyModule end myObj = MyClass ... myObj . my_method () modules included called mixin , behaves as super classes (see the slide) can not inheritate from multiple class, but can include multiple modules two pointer problem: anonymuos pointers point to mixin , actually have no super class pointer Another way to mix-in: prepend, see the slides, differences 1 2 3 4 5 6 7 8 9 10 11 module MyModule def my_method end end class MyClass include MyModule end myObj = MyClass ... myObj . my_method () resson: different order in chain Extend: another way to define class method make module instance method to be class method require and include do not define instance variable in mixin built-in mixin: 1 2 3 4 5 6 7 8 9 10 11 class Student include Comparable attr_accessor :name ... def <=> ( otherStudent ) self . name <=> otherStudent . name end def to_s \" #{ @name } \" end Kernel Object class is using mixin called Kernel Enumerate Regular Expression Def: a way to define a language: / abc / (meta char) 1 2 3 4 5 6 /abc/ /abc|xyz/ /(Homer|Marge|Bart) Simpson/ /^abc$/ Meta Chars / , \\ , ^ , $ , + , - + , * , ? { max , min } : number of times (exact or range) [] , short version -> [ a - z ] , [ a - z0 - 9 ] , [ a - zA - Z0 - 9 ] , use ^ to negate inside [] (even shorter: \\d, \\D, \\w, \\W, \\s, \\S) Method: .scan .sub replace the first matching .gsub replace all matching Matching Operator: / RegEx / =~ \" String","title":"Ruby"},{"location":"2019-04-16/#ruby","text":"","title":"Ruby"},{"location":"2019-04-16/#module","text":"Def: Similar to a class, except without .new () no super class Creation Class -> myClass (pointer to Class) (super class) -> myObj (pointer to myClass) Module -> myModule (pointer to Class) (instance of Module class, singleton), no super class Item Module Class See the sildes Contents classes / modules constants module methods instance methods instance variables 1 2 3 4 5 6 module MyModule # like a name space for classes class MyClass def my_method end end end Reason to have classes Organize constants (including class and modules within) Provide collection of methods. As namespace Constant: Class / modules names Can be changed but will generate warnings. Scope: global, can be put in anywhere and accessed from anywhere using :: COSTANT_NAME Cannot defined inside instance method If multiple with same name, \"nearest\"(physically) one will be returned :: notation, for top ones Diff constant and variables: make a chart Function -> stack (This is the reason of scope) Scope: Enter a new scope: module class method p local_variables : get local variables in the current scope Module methods same as class method Instance methods in module: create sub class 1 2 3 4 5 6 7 8 9 10 11 module MyModule def my_method end end class MyClass include MyModule end myObj = MyClass ... myObj . my_method () modules included called mixin , behaves as super classes (see the slide) can not inheritate from multiple class, but can include multiple modules two pointer problem: anonymuos pointers point to mixin , actually have no super class pointer Another way to mix-in: prepend, see the slides, differences 1 2 3 4 5 6 7 8 9 10 11 module MyModule def my_method end end class MyClass include MyModule end myObj = MyClass ... myObj . my_method () resson: different order in chain Extend: another way to define class method make module instance method to be class method require and include do not define instance variable in mixin built-in mixin: 1 2 3 4 5 6 7 8 9 10 11 class Student include Comparable attr_accessor :name ... def <=> ( otherStudent ) self . name <=> otherStudent . name end def to_s \" #{ @name } \" end Kernel Object class is using mixin called Kernel Enumerate","title":"Module"},{"location":"2019-04-16/#regular-expression","text":"Def: a way to define a language: / abc / (meta char) 1 2 3 4 5 6 /abc/ /abc|xyz/ /(Homer|Marge|Bart) Simpson/ /^abc$/ Meta Chars / , \\ , ^ , $ , + , - + , * , ? { max , min } : number of times (exact or range) [] , short version -> [ a - z ] , [ a - z0 - 9 ] , [ a - zA - Z0 - 9 ] , use ^ to negate inside [] (even shorter: \\d, \\D, \\w, \\W, \\s, \\S) Method: .scan .sub replace the first matching .gsub replace all matching Matching Operator: / RegEx / =~ \" String","title":"Regular Expression"},{"location":"2019-04-18/","text":"2019-04-18 Recap Module get all the vowels 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class VowelFinder include Enumerable def initialize ( string ) @string = string end def each @string . scan ( /[aeiou]/ ) do | vowel | yield vowel end end end \"about\" # a, o, u vf = VowelFinder . new ( \"For a mixin, this means you can call them.\" ) vf . each { | v | p v , '-' } p vf . select { | v | v >= 'o' } p vf . map { | v | v * 5 } p vf . inject { :+ } # concatenate all RegEx Continue =~ return the matching position or nil . \\ A \\ Z is the same as ^ $ 1 2 3 4 5 6 7 8 9 w = [ \"new\" , \"New\" , \"NEW\" ] w . each do | word | case word when /^[a-z]*$/ then p \" #{ word } is lower case\" when /^[A-Z]*$/ then p \" #{ word } is upper case\" else then p \" #{ word } is mixed case\" end end \\ b Boundary 1 2 3 \"This is a sentence\" . gsub ( /\\b/ , \"*\" ) \"This is a sentence\" . gsub ( /\\bis/ , \"*\" ) \"This is a sentence\" . gsub ( /\\Bis/ , \"*\" ) \\ w Word 1 2 /(\\w+)\\1/ =~ \"banana\" # exact same \\w+ twice /(\\w+)(\\w+)/ =~ \"banana\" # any two \\w+, not required to be same Methods of RegEx .match return a obj .pre_match the position before matching .post_match the position after matching %r { mm / dd } is exactly same as / mm \\ / dd , no need to escape. . for any single char 1 2 \"012345\" =~ /.4/ # 3 \"abcde\" =~ /.e/ # 3 Greedy repetition and lazy repetition greedy repetition: default, return as many chars as possible lazy: less 1 2 3 /go?d/ . match ( \"this is a good class\" ) # goo, greedy /go??d/ . match ( \"this is a good class\" ) # go, lazy /g(o?)?d/ . match ( \"this is a good class\" ) Grouping 1 2 3 4 /an+/ . match ( \"banana\" ) /(an)+/ . match ( \"banana\" ) /(\\d\\d):(\\d\\d)(..)/ . match ( \"12:30am\" ) name the group, can be used in local variables I/O Two way Kernel methods CLasses Kernel methods Kernel (mixin) included in object puts puts gets: get a line from input / file in argv readlines: read each line using gets 1 Can use class method and/or instance method ARGV , ARGF 1 > ruby my . rb argv returns all the arguments argf only returns file arguments Dir CSV 1 2 3 4 5 require csv foreach ( \"myfile.csv\" ) do | row | CSV .","title":"2019-04-18"},{"location":"2019-04-18/#2019-04-18","text":"","title":"2019-04-18"},{"location":"2019-04-18/#recap","text":"","title":"Recap"},{"location":"2019-04-18/#module","text":"get all the vowels 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class VowelFinder include Enumerable def initialize ( string ) @string = string end def each @string . scan ( /[aeiou]/ ) do | vowel | yield vowel end end end \"about\" # a, o, u vf = VowelFinder . new ( \"For a mixin, this means you can call them.\" ) vf . each { | v | p v , '-' } p vf . select { | v | v >= 'o' } p vf . map { | v | v * 5 } p vf . inject { :+ } # concatenate all","title":"Module"},{"location":"2019-04-18/#regex-continue","text":"=~ return the matching position or nil . \\ A \\ Z is the same as ^ $ 1 2 3 4 5 6 7 8 9 w = [ \"new\" , \"New\" , \"NEW\" ] w . each do | word | case word when /^[a-z]*$/ then p \" #{ word } is lower case\" when /^[A-Z]*$/ then p \" #{ word } is upper case\" else then p \" #{ word } is mixed case\" end end \\ b Boundary 1 2 3 \"This is a sentence\" . gsub ( /\\b/ , \"*\" ) \"This is a sentence\" . gsub ( /\\bis/ , \"*\" ) \"This is a sentence\" . gsub ( /\\Bis/ , \"*\" ) \\ w Word 1 2 /(\\w+)\\1/ =~ \"banana\" # exact same \\w+ twice /(\\w+)(\\w+)/ =~ \"banana\" # any two \\w+, not required to be same Methods of RegEx .match return a obj .pre_match the position before matching .post_match the position after matching %r { mm / dd } is exactly same as / mm \\ / dd , no need to escape. . for any single char 1 2 \"012345\" =~ /.4/ # 3 \"abcde\" =~ /.e/ # 3 Greedy repetition and lazy repetition greedy repetition: default, return as many chars as possible lazy: less 1 2 3 /go?d/ . match ( \"this is a good class\" ) # goo, greedy /go??d/ . match ( \"this is a good class\" ) # go, lazy /g(o?)?d/ . match ( \"this is a good class\" ) Grouping 1 2 3 4 /an+/ . match ( \"banana\" ) /(an)+/ . match ( \"banana\" ) /(\\d\\d):(\\d\\d)(..)/ . match ( \"12:30am\" ) name the group, can be used in local variables","title":"RegEx Continue"},{"location":"2019-04-18/#io","text":"Two way Kernel methods CLasses","title":"I/O"},{"location":"2019-04-18/#kernel-methods","text":"Kernel (mixin) included in object puts puts gets: get a line from input / file in argv readlines: read each line using gets 1 Can use class method and/or instance method ARGV , ARGF 1 > ruby my . rb argv returns all the arguments argf only returns file arguments Dir CSV 1 2 3 4 5 require csv foreach ( \"myfile.csv\" ) do | row | CSV .","title":"Kernel methods"},{"location":"2019-04-23/","text":"2019-04-23 Recap RegEx File IO: the use of blocks IO BasicSocket Web programming Web server server side app: CGI script Web Server Based onf HTTP, supported by TCP/IP TCP Socket APIs open a TCP socket: abstraction to represent connections layers: IO -> BasicSocket -> Socket -> IPSocket -> TCPSocket Programs Listener: listen => infinite loop Initiator: connect 1 require 'socket' Server (Listener) Structure: Create -> Bind -> Listen -> Accept -> Close (-> listen) Create a socket 1 socket = Socket . new ( domain , socktype , ) Bind 1 address = Socket . pack_sockaddr_in ( port , addr ) Listen 1 Accept 1 Syntax Sugar (wrap the complicated code) 1 2 3 4 5 6 require `socket` server = TCPServer . new ( 'localhost' , 4444 ) Socket . accept_loop ( server ) { | connection | connection . close } Even sweeter 1 2 3 require `socket` Socket . TCPServer . new ( 'localhost' , 1234 ) Client: Create -> Connect -> Close Syntax Sugar 1 2 3 require `socket` Socket . TCPSocket . new ( 'localhost' , 1234 ) Exchange data write to read from 1 2 connection . read connection . gets # line by line 1 2 3 4 5 6 7 8 require 'socket' p Socket . tcp_server_loop ( 1234 ) { | connection | connection . read connection . close } 1 echo ... | nc localhost port 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 require 'socket' # string not have is_integer class String def is_interger? /^\\d+{4,5}$/ =~ self end end if ARGV . size < 2 puts \"port or message missing...\" else begin port = ARGV [ 0 ] raise ArgumentError unless port . is_integer? ARGV . slice! ( 0 ) message = ARGV . join ( ' ' ) socket = TCPSocket . new ( 'lcoalhost' , port ) socket . write ( message ) rescue ArgumentError puts \"port is not a number.\" rescue # any other error puts \"connection error ... exiting ...\" end end Linux pipe Exception handling 1 2 3 4 5 def raise_exception puts \"before raise\" raise \"I created this error\" # Anything after raise won't be executed puts \"after raise\" end not String 1 2 3 4 def inverse ( n ) raise Argument Error , \"NaN\" unless n . is_a? Numeric 1 . 0 / n end handle the exception 1 2 3 4 5 6 7 8 9 10 11 def raise_rescue begin puts \"before raise\" raise \"I created this error\" # Anything after raise won't be executed puts \"after raise\" rescue puts \"this is a rescue\" end puts \"after rescue\" end HTTP request example 1 2 GET /hello.htm HTTP / 1.1 User-Agent : Mozilla/4.0 (Compatible) Write a server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 require 'socket' # Get port number if ARGV . size != 1 puts \"please specify port ...\" exit else port = ARGV [ 0 ] end puts \"listening at port #{ port } \" server = TCPServer . new ( \"127.0.0.1\" , port ) Socket . accept_loop ( server ) { | connection | request = connection . gets request_file_name = request . gsub ( '/GET\\ \\//' , \"\" ) . gsub ( \"/\\ HTTP.*\" , \"\" ) filename = request_file_name . chomp # get rid of weird chars if filename == \"\" filename = \"index.html\" end begin f = File . open ( filename , \"r\" ) content = f . read # head connection . print \"HTTP/1.1 200 OK \\r\\n Connect-type:text/html \\r\\n \" connection . print \"Content-Length: #{ content . size } \" connection . print \"Connection: close \\r\\n \" connection . print \" \\r\\n \" # body connection . print content rescue Errno :: ENOENT puts \"requested file #{ filename } not found\" conneciton . print \"HTTP/1.1 404 Not Found\" conneciton . print \"Server: myserver\" conneciton . print \"Connection close \\r\\n \" conneciton . print \" \\r\\n \" # body conneciton . print \"<h1> File can not be found</h1>\" end } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!-- index.html --> < html > < head > </ head > < body > < h1 > welcome to my default page </ h1 > </ body > </ html > <!-- page.html --> < html > < head > </ head > < body > < div style = \"test-align:center\" > < h1 > welcome to my defualt page </ h1 > < img src = \"newevoli.jpg\" /> < h1 > new evoli </ h1 > </ div > </ body > </ html > Standard Library Net::HTTP: simple client o fetch header and open-uri: wrapper of CGI -> program","title":"2019-04-23"},{"location":"2019-04-23/#2019-04-23","text":"","title":"2019-04-23"},{"location":"2019-04-23/#recap","text":"RegEx File IO: the use of blocks","title":"Recap"},{"location":"2019-04-23/#io","text":"","title":"IO"},{"location":"2019-04-23/#basicsocket","text":"Web programming Web server server side app: CGI script","title":"BasicSocket"},{"location":"2019-04-23/#web-server","text":"Based onf HTTP, supported by TCP/IP TCP Socket APIs open a TCP socket: abstraction to represent connections layers: IO -> BasicSocket -> Socket -> IPSocket -> TCPSocket Programs Listener: listen => infinite loop Initiator: connect 1 require 'socket' Server (Listener) Structure: Create -> Bind -> Listen -> Accept -> Close (-> listen) Create a socket 1 socket = Socket . new ( domain , socktype , ) Bind 1 address = Socket . pack_sockaddr_in ( port , addr ) Listen 1 Accept 1 Syntax Sugar (wrap the complicated code) 1 2 3 4 5 6 require `socket` server = TCPServer . new ( 'localhost' , 4444 ) Socket . accept_loop ( server ) { | connection | connection . close } Even sweeter 1 2 3 require `socket` Socket . TCPServer . new ( 'localhost' , 1234 ) Client: Create -> Connect -> Close Syntax Sugar 1 2 3 require `socket` Socket . TCPSocket . new ( 'localhost' , 1234 ) Exchange data write to read from 1 2 connection . read connection . gets # line by line 1 2 3 4 5 6 7 8 require 'socket' p Socket . tcp_server_loop ( 1234 ) { | connection | connection . read connection . close } 1 echo ... | nc localhost port 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 require 'socket' # string not have is_integer class String def is_interger? /^\\d+{4,5}$/ =~ self end end if ARGV . size < 2 puts \"port or message missing...\" else begin port = ARGV [ 0 ] raise ArgumentError unless port . is_integer? ARGV . slice! ( 0 ) message = ARGV . join ( ' ' ) socket = TCPSocket . new ( 'lcoalhost' , port ) socket . write ( message ) rescue ArgumentError puts \"port is not a number.\" rescue # any other error puts \"connection error ... exiting ...\" end end Linux pipe Exception handling 1 2 3 4 5 def raise_exception puts \"before raise\" raise \"I created this error\" # Anything after raise won't be executed puts \"after raise\" end not String 1 2 3 4 def inverse ( n ) raise Argument Error , \"NaN\" unless n . is_a? Numeric 1 . 0 / n end handle the exception 1 2 3 4 5 6 7 8 9 10 11 def raise_rescue begin puts \"before raise\" raise \"I created this error\" # Anything after raise won't be executed puts \"after raise\" rescue puts \"this is a rescue\" end puts \"after rescue\" end HTTP request example 1 2 GET /hello.htm HTTP / 1.1 User-Agent : Mozilla/4.0 (Compatible) Write a server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 require 'socket' # Get port number if ARGV . size != 1 puts \"please specify port ...\" exit else port = ARGV [ 0 ] end puts \"listening at port #{ port } \" server = TCPServer . new ( \"127.0.0.1\" , port ) Socket . accept_loop ( server ) { | connection | request = connection . gets request_file_name = request . gsub ( '/GET\\ \\//' , \"\" ) . gsub ( \"/\\ HTTP.*\" , \"\" ) filename = request_file_name . chomp # get rid of weird chars if filename == \"\" filename = \"index.html\" end begin f = File . open ( filename , \"r\" ) content = f . read # head connection . print \"HTTP/1.1 200 OK \\r\\n Connect-type:text/html \\r\\n \" connection . print \"Content-Length: #{ content . size } \" connection . print \"Connection: close \\r\\n \" connection . print \" \\r\\n \" # body connection . print content rescue Errno :: ENOENT puts \"requested file #{ filename } not found\" conneciton . print \"HTTP/1.1 404 Not Found\" conneciton . print \"Server: myserver\" conneciton . print \"Connection close \\r\\n \" conneciton . print \" \\r\\n \" # body conneciton . print \"<h1> File can not be found</h1>\" end } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!-- index.html --> < html > < head > </ head > < body > < h1 > welcome to my default page </ h1 > </ body > </ html > <!-- page.html --> < html > < head > </ head > < body > < div style = \"test-align:center\" > < h1 > welcome to my defualt page </ h1 > < img src = \"newevoli.jpg\" /> < h1 > new evoli </ h1 > </ div > </ body > </ html > Standard Library Net::HTTP: simple client o fetch header and open-uri: wrapper of CGI -> program","title":"Web Server"},{"location":"2019-04-25/","text":"2019-04-25 recap Web application Goal: generate HTML pages ways manual CGI script RUby CGI CGI script cgi-folder set up a CGI server Ruby CGI standard library Send data from browser to server query string form ajax Retrieving data: CGI # params example: http request => CGI hash 1 2 3 4 5 require 'cgi' cgi = CGI . new cgi . user_agent cg ... Form: a CGI program slides 1 2 3 4 5 require 'cgi' cgi = CGI . new cgi . user_agent cg ... Cookie: storing session information Store on the client Session: a whole browsing procedure 1 cookie = CGI :: Cookie . new ( cookie_name , cookie_value ) Session: another technique to store session info Data store on the server Session key on the client as a cookie 1 2 3 session = CGI :: Session . new ( cgi , \"session_key\" => \"mysession\" , \"sessiion_expires\" => Time . now + 30 * 60 ) Template Systems static text + program => static text + string Catagories erb (Web Programming I) PHP (embedded ruby) haml ERB template system Define method Huge string external file naming convention: filename . output_type . erb 1 2 < % ruby code %> < %= ruby expression %> 1 2 3 4 5 < ul > < % for item in @shopping_list %> < li > < %= item %> </ li > < % end %> </ ul > Filter template 1 renderer = ERB . new ( template ) HAML Install HAML 1 gem install haml Frameworks Midterm 1 page cheat sheet. Ruby on Rails Sinatra","title":"2019-04-25"},{"location":"2019-04-25/#2019-04-25","text":"","title":"2019-04-25"},{"location":"2019-04-25/#recap","text":"","title":"recap"},{"location":"2019-04-25/#web-application","text":"Goal: generate HTML pages ways manual CGI script RUby CGI","title":"Web application"},{"location":"2019-04-25/#cgi-script","text":"cgi-folder set up a CGI server","title":"CGI script"},{"location":"2019-04-25/#ruby-cgi-standard-library","text":"Send data from browser to server query string form ajax Retrieving data: CGI # params example: http request => CGI hash 1 2 3 4 5 require 'cgi' cgi = CGI . new cgi . user_agent cg ... Form: a CGI program slides 1 2 3 4 5 require 'cgi' cgi = CGI . new cgi . user_agent cg ... Cookie: storing session information Store on the client Session: a whole browsing procedure 1 cookie = CGI :: Cookie . new ( cookie_name , cookie_value ) Session: another technique to store session info Data store on the server Session key on the client as a cookie 1 2 3 session = CGI :: Session . new ( cgi , \"session_key\" => \"mysession\" , \"sessiion_expires\" => Time . now + 30 * 60 )","title":"Ruby CGI standard library"},{"location":"2019-04-25/#template-systems","text":"static text + program => static text + string Catagories erb (Web Programming I) PHP (embedded ruby) haml","title":"Template Systems"},{"location":"2019-04-25/#erb-template-system","text":"Define method Huge string external file naming convention: filename . output_type . erb 1 2 < % ruby code %> < %= ruby expression %> 1 2 3 4 5 < ul > < % for item in @shopping_list %> < li > < %= item %> </ li > < % end %> </ ul > Filter template 1 renderer = ERB . new ( template )","title":"ERB template system"},{"location":"2019-04-25/#haml","text":"Install HAML 1 gem install haml","title":"HAML"},{"location":"2019-04-25/#frameworks","text":"","title":"Frameworks"},{"location":"2019-04-25/#midterm","text":"1 page cheat sheet.","title":"Midterm"},{"location":"2019-04-25/#ruby-on-rails","text":"","title":"Ruby on Rails"},{"location":"2019-04-25/#sinatra","text":"","title":"Sinatra"},{"location":"2019-04-30/","text":"2019-04-30 recap Manual CGI CGI standard Template system Frameworks Sinatra A ruby library to provide a DSL (domain specific language) Install: gen install sinatra Not as framework as Ruby on Rails no file structure 1 2 3 4 5 require sinatra get '/hello' do # request, using clean url \"<h1>...</h1>\" # response end - clean url: not necessarily files, just a identifier. 1 2 3 4 5 6 7 require 'sinatra' get '/home' do %{ } end THIN => application server Match the request from top-down Passing named parameter different route share same controller Wild card: see slides Be careful for the sequence RegEx redirect : sending back to the browser Static page will be in public folder, will be in higher priority than router. Filter before after Configure Sinatra only have 4 methods defined??? not found sinatra-contrib: non stop Set ip & port login page 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 require 'sinatra' get '/login' do %{ <html> <body> <h1>Please login</h1> <form action='/login' method='post'> username: <input type='text' name='username'></input><br> password: <input type='text' name='password'></input><br> <input type='submit' name='login'></input> </body> </html> } end post '/login' do \"<h1>id #{ params [ :username ] } , password: #{ params [ :password ] } </h1>\" end upload file 1 2 3 4 5 6 7 <!-- upload.html --> < html > < h1 > Upload a file </ h1 > < form action = \"/upload\" method = \"post\" enctype = \"multipart/form-data\" > file to upload: < input type = \"file\" name = \"file\" > < input type = \"submit\" value = \"upload\" > </ html > 1 2 3 4 5 6 7 8 require 'sinatra' post '/upload' do tempfile = params [ 'file' ][ :tempfile ] filename = params [ 'file' ][ :filename ] File . write ( \"./uploadfoler/ #{ filename } \" , tempfile . read ) \"File uploaded complete: #{ filename } \" end Guess name 1 2 3 4 5 6 7 8 9 10 require 'sinatra' get '/guess/:who' do pass unless params [ :who ] = 'yuan' # pass leads to next route \"you got me!\" end get 'guess/*' do \"you missed!\" end Bet 1 2 3 4 5 6 7 8 9 10 11 12 13 require 'sinatra' get '/bet/:stake/on/:number' do stake = params [ :stake ]. to_i # don't forget type number = params [ :number ]. to_i roll = rand ( 6 ) + 1 if nubmer == roll \"<h1>the dice landed on #{ roll } you win #{ 10 * stake } dollars\" else \"<h1>the dice landed on #{ roll } you lose #{ stake } dollars\" end end","title":"2019-04-30"},{"location":"2019-04-30/#2019-04-30","text":"","title":"2019-04-30"},{"location":"2019-04-30/#recap","text":"Manual CGI CGI standard Template system","title":"recap"},{"location":"2019-04-30/#frameworks","text":"","title":"Frameworks"},{"location":"2019-04-30/#sinatra","text":"A ruby library to provide a DSL (domain specific language) Install: gen install sinatra Not as framework as Ruby on Rails no file structure 1 2 3 4 5 require sinatra get '/hello' do # request, using clean url \"<h1>...</h1>\" # response end - clean url: not necessarily files, just a identifier. 1 2 3 4 5 6 7 require 'sinatra' get '/home' do %{ } end THIN => application server Match the request from top-down Passing named parameter different route share same controller Wild card: see slides Be careful for the sequence RegEx redirect : sending back to the browser Static page will be in public folder, will be in higher priority than router. Filter before after Configure Sinatra only have 4 methods defined??? not found sinatra-contrib: non stop Set ip & port login page 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 require 'sinatra' get '/login' do %{ <html> <body> <h1>Please login</h1> <form action='/login' method='post'> username: <input type='text' name='username'></input><br> password: <input type='text' name='password'></input><br> <input type='submit' name='login'></input> </body> </html> } end post '/login' do \"<h1>id #{ params [ :username ] } , password: #{ params [ :password ] } </h1>\" end upload file 1 2 3 4 5 6 7 <!-- upload.html --> < html > < h1 > Upload a file </ h1 > < form action = \"/upload\" method = \"post\" enctype = \"multipart/form-data\" > file to upload: < input type = \"file\" name = \"file\" > < input type = \"submit\" value = \"upload\" > </ html > 1 2 3 4 5 6 7 8 require 'sinatra' post '/upload' do tempfile = params [ 'file' ][ :tempfile ] filename = params [ 'file' ][ :filename ] File . write ( \"./uploadfoler/ #{ filename } \" , tempfile . read ) \"File uploaded complete: #{ filename } \" end Guess name 1 2 3 4 5 6 7 8 9 10 require 'sinatra' get '/guess/:who' do pass unless params [ :who ] = 'yuan' # pass leads to next route \"you got me!\" end get 'guess/*' do \"you missed!\" end Bet 1 2 3 4 5 6 7 8 9 10 11 12 13 require 'sinatra' get '/bet/:stake/on/:number' do stake = params [ :stake ]. to_i # don't forget type number = params [ :number ]. to_i roll = rand ( 6 ) + 1 if nubmer == roll \"<h1>the dice landed on #{ roll } you win #{ 10 * stake } dollars\" else \"<h1>the dice landed on #{ roll } you lose #{ stake } dollars\" end end","title":"Sinatra"},{"location":"2019-05-07/","text":"2019-05-07 Sinatra Continue View With framework 1 2 3 get '/' do erb :home end Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 requite 'sinatra' get '/' do erb :home end get '/about' do erb :about end get '/contact' do erb :contact end __END__ @@home # view <html> <head></head> <body> <h1>Songs by Sinatra</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <h3>Welcome to site about sinatra</h3> </body> </html> @@contact # view <html> <head></head> <body> <h1>Songs by Sinatra</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <h3>Please contact me</h3> <h3> </body> </html> @@abuot # view <html> <head></head> <body> <h1>Songs by Sinatra</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <h3>Infor mation about my site</h3> </body> </html> Layout Template of template, reduce duplication 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 requite 'sinatra' get '/' do @title = \"home\" erb :home , :layout => :homelayout end get '/about' do @title = \"about\" erb :about end get '/contact' do @title = \"contact\" erb :contact # actually => erb(:contact) end get '/*' do @route = params [ :splat ] pass # go on to not_found end not_found do erb :contact , :layout => false end __END__ @@layout # layout <html> <head> <link href = \"style.css\" rel = \"stylesheet\" type = \"text/css\"> # laod css <head><%= @title || \"Songs by Sinatra\" %></head> </head> <body> <h1>Songs by Sinatra</h1> <img src=\"sinatra.jpg\" alt = \"sinatra\" width=10%></img> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <%= yield %> <%= erb @name %> # partial dynamically </body> </html> @@homelayout # layout <html> <head></head> <body> <h1>Songs by Sinatra (in Home layout)</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <%= yield %> </body> </html> @@home # view <h3>Welcome to site about sinatra</h3> @@contact # view @name = :anotherview <h3>Please contact me</h3> @@about # view <h3>Infor mation about my site</h3> @@notefound <h3>I don't know how to handle <%= @route %></h3> How to put the into seperate files. CSS file: in public folder SASS: template for CSS, CSS preprocessor type SCSS: newer Indent syntax Contents: variables mixin 1 2 3 get '/styles.css' do get end A log-on form inside all views 1 2 3 4 5 6 @@about # view < h3 > Infor mation about my site < /h3> <%= erb :logon %> # inculde a view in another one. @@logon <h1>Please log on</ h1 > Layout vs. partials Database MVC design pattern Controller Model View SQLite open source serverless, light weight single database file no installation / configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sqlite3 . open name . db -- commands . tables -- list tables CREATE TABLE students ( id VARCHAR ( 10 ) PRIMARY KEY , first name TEXT , lastname TEXT ); . schemas INSERT INTO student VALUES ( \"w1234\" , \"yuan\" , \"wang\" ); INSERT INTO student VALUES ( \"w1235\" , \"Someone\" , \"else\" ); SELECT * FROM students ;","title":"2019-05-07"},{"location":"2019-05-07/#2019-05-07","text":"","title":"2019-05-07"},{"location":"2019-05-07/#sinatra-continue","text":"","title":"Sinatra Continue"},{"location":"2019-05-07/#view","text":"With framework 1 2 3 get '/' do erb :home end Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 requite 'sinatra' get '/' do erb :home end get '/about' do erb :about end get '/contact' do erb :contact end __END__ @@home # view <html> <head></head> <body> <h1>Songs by Sinatra</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <h3>Welcome to site about sinatra</h3> </body> </html> @@contact # view <html> <head></head> <body> <h1>Songs by Sinatra</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <h3>Please contact me</h3> <h3> </body> </html> @@abuot # view <html> <head></head> <body> <h1>Songs by Sinatra</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <h3>Infor mation about my site</h3> </body> </html>","title":"View"},{"location":"2019-05-07/#layout","text":"Template of template, reduce duplication 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 requite 'sinatra' get '/' do @title = \"home\" erb :home , :layout => :homelayout end get '/about' do @title = \"about\" erb :about end get '/contact' do @title = \"contact\" erb :contact # actually => erb(:contact) end get '/*' do @route = params [ :splat ] pass # go on to not_found end not_found do erb :contact , :layout => false end __END__ @@layout # layout <html> <head> <link href = \"style.css\" rel = \"stylesheet\" type = \"text/css\"> # laod css <head><%= @title || \"Songs by Sinatra\" %></head> </head> <body> <h1>Songs by Sinatra</h1> <img src=\"sinatra.jpg\" alt = \"sinatra\" width=10%></img> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <%= yield %> <%= erb @name %> # partial dynamically </body> </html> @@homelayout # layout <html> <head></head> <body> <h1>Songs by Sinatra (in Home layout)</h1> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/about\">About</a></li> <li><a href=\"/contact\">Contact</a></li> </ul> <%= yield %> </body> </html> @@home # view <h3>Welcome to site about sinatra</h3> @@contact # view @name = :anotherview <h3>Please contact me</h3> @@about # view <h3>Infor mation about my site</h3> @@notefound <h3>I don't know how to handle <%= @route %></h3> How to put the into seperate files. CSS file: in public folder SASS: template for CSS, CSS preprocessor type SCSS: newer Indent syntax Contents: variables mixin 1 2 3 get '/styles.css' do get end A log-on form inside all views 1 2 3 4 5 6 @@about # view < h3 > Infor mation about my site < /h3> <%= erb :logon %> # inculde a view in another one. @@logon <h1>Please log on</ h1 > Layout vs. partials","title":"Layout"},{"location":"2019-05-07/#database","text":"MVC design pattern Controller Model View SQLite open source serverless, light weight single database file no installation / configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sqlite3 . open name . db -- commands . tables -- list tables CREATE TABLE students ( id VARCHAR ( 10 ) PRIMARY KEY , first name TEXT , lastname TEXT ); . schemas INSERT INTO student VALUES ( \"w1234\" , \"yuan\" , \"wang\" ); INSERT INTO student VALUES ( \"w1235\" , \"Someone\" , \"else\" ); SELECT * FROM students ;","title":"Database"},{"location":"2019-05-09/","text":"2019-05-09 Sinatra continue database ORM: obj relational mapper wrapped in api install using gem data wrapper Connect db 1 2 3 4 5 6 7 8 9 10 11 12 DataMapper . setup ( # sqlite :default , \"sqlite3:// #{ Dir . pwd } /song.db\" # any ext ) DataMapper . setup ( # mysql ) DataMapper . setup ( # ... ) Connect to another database; 1 Define Table 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Song # database name auto plural form => Songs include DataMapper :: Resource # mix-in property :id , Serial # increamental primary key property :title , String property :lyrics , Text property :length , Integer property :released , Data end DataMapper . auto_migrate! # recreate class Song # database name auto plural form => Songs include DataMapper :: Resource # mix-in property :new , Text end DataMapper . auto_upgrade! # modify Record: CRUD as obj Create Read Update: song . update ( title : \"your way\" ) Delete: song . destroy Class method count .all .all (: title.like => ' way %' ) query .get .first .last example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 require 'dm-core' require 'md-migrations' DataMapper . setup ( :default , \"sqlite3:// #{ Dir . pwd } \" / song . db ) # Define the model class Song include DataMapper :: Resource property :id , Serial property :title , String property :lyrics , Text property :length , Integer property :released , Date end DataMapper . finalize # chechin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # irb require './song' Song . auto_migrate! # song.db created song = Song . new # new row song . title = \"my way\" song . lyrics = \"this is my way\" song . length = \"345\" song . released = Data . new ( 2019 ) # 209-01-01 song . save # row saved # or use class method Song . create ( title : \"new york\" , lyrics : \"new york new york\" , length : 211 , released : Data . new ( 1967 ) ) Song . all # select all Song . all . reverse Song . count Song . get ( 1 ) Song . first Song . last Song . last . destroy get '/songs' do # require './song' in app.rb @songs = Song . all erb :songs # view to be rendered end get '/songs/:id' do # use id to query talbe erb :show_song end delete '/songs/:id' ... get '/songs/new' do # use post for new, put for modify # create a new row erb :new_song end put '/songs/:id' do end 1 2 3 4 5 6 7 8 # songs.erb < h2 > Song list < /h2> <ul> <% @songs.each do |song| %> <li><a href=\"/son gs /< %= song.id %>\"><%= song . title %></a> < /li> <% end %> </u l > 1 2 3 4 # show_song.erb <!-- - title , lyrics , length , \"delete\" ( form , hidden field , val = delete ) --> edit button \"get\" , query the song at erb :edit_song , same form as \"new song form\" <!-- save button : hidden field , val = \"put\" --> Modify program: layout","title":"2019-05-09"},{"location":"2019-05-09/#2019-05-09","text":"","title":"2019-05-09"},{"location":"2019-05-09/#sinatra-continue","text":"","title":"Sinatra continue"},{"location":"2019-05-09/#database","text":"ORM: obj relational mapper wrapped in api install using gem data wrapper Connect db 1 2 3 4 5 6 7 8 9 10 11 12 DataMapper . setup ( # sqlite :default , \"sqlite3:// #{ Dir . pwd } /song.db\" # any ext ) DataMapper . setup ( # mysql ) DataMapper . setup ( # ... ) Connect to another database; 1 Define Table 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Song # database name auto plural form => Songs include DataMapper :: Resource # mix-in property :id , Serial # increamental primary key property :title , String property :lyrics , Text property :length , Integer property :released , Data end DataMapper . auto_migrate! # recreate class Song # database name auto plural form => Songs include DataMapper :: Resource # mix-in property :new , Text end DataMapper . auto_upgrade! # modify Record: CRUD as obj Create Read Update: song . update ( title : \"your way\" ) Delete: song . destroy Class method count .all .all (: title.like => ' way %' ) query .get .first .last example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 require 'dm-core' require 'md-migrations' DataMapper . setup ( :default , \"sqlite3:// #{ Dir . pwd } \" / song . db ) # Define the model class Song include DataMapper :: Resource property :id , Serial property :title , String property :lyrics , Text property :length , Integer property :released , Date end DataMapper . finalize # chechin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # irb require './song' Song . auto_migrate! # song.db created song = Song . new # new row song . title = \"my way\" song . lyrics = \"this is my way\" song . length = \"345\" song . released = Data . new ( 2019 ) # 209-01-01 song . save # row saved # or use class method Song . create ( title : \"new york\" , lyrics : \"new york new york\" , length : 211 , released : Data . new ( 1967 ) ) Song . all # select all Song . all . reverse Song . count Song . get ( 1 ) Song . first Song . last Song . last . destroy get '/songs' do # require './song' in app.rb @songs = Song . all erb :songs # view to be rendered end get '/songs/:id' do # use id to query talbe erb :show_song end delete '/songs/:id' ... get '/songs/new' do # use post for new, put for modify # create a new row erb :new_song end put '/songs/:id' do end 1 2 3 4 5 6 7 8 # songs.erb < h2 > Song list < /h2> <ul> <% @songs.each do |song| %> <li><a href=\"/son gs /< %= song.id %>\"><%= song . title %></a> < /li> <% end %> </u l > 1 2 3 4 # show_song.erb <!-- - title , lyrics , length , \"delete\" ( form , hidden field , val = delete ) --> edit button \"get\" , query the song at erb :edit_song , same form as \"new song form\" <!-- save button : hidden field , val = \"put\" --> Modify program: layout","title":"database"},{"location":"2019-05-14/","text":"2019-05-14 Continue Sinatra Environment: - e flag devolopment (default) test production 1 ruby myabb.rb -e production Check environment 1 require 'sinatra/reloader' if developemnt? Configure block 1 2 3 4 5 6 7 8 9 10 11 12 configure do set :public_folder , '/static' # all are class methods set :views set :static set :root set :port # -p set :show_exception set :username # custom val end # access settings . username use as condition configure : development , test Sessions Defualt disalbed Use in hw2 1 2 3 4 5 6 7 8 9 10 11 12 13 require 'sinatra' enable : sessions get '/start' do session [ :message ] = 'Hello World!' # save in session redirect to ( '/another' ) # send resonse to browser # w/o session, immediate dispose the info, until end get 'another' do session [ :message ] # access session end 1 2 3 4 5 6 7 8 9 10 11 12 require 'sinatra' enable : sessions get '/set/:name' do session [ :message ] = params [ :name ] redirect to ( '/another' ) end get 'another' do \"Hello, #{ session [ :message ] } \" end add lingin using slim Destry session Deploying the application Heroku: PaaS Git Using Bundler telling Heroku what dependencies are needed bundler.io, gem install bundler Gemfile config.ru","title":"2019-05-14"},{"location":"2019-05-14/#2019-05-14","text":"","title":"2019-05-14"},{"location":"2019-05-14/#continue-sinatra","text":"Environment: - e flag devolopment (default) test production 1 ruby myabb.rb -e production Check environment 1 require 'sinatra/reloader' if developemnt? Configure block 1 2 3 4 5 6 7 8 9 10 11 12 configure do set :public_folder , '/static' # all are class methods set :views set :static set :root set :port # -p set :show_exception set :username # custom val end # access settings . username use as condition configure : development , test","title":"Continue Sinatra"},{"location":"2019-05-14/#sessions","text":"Defualt disalbed Use in hw2 1 2 3 4 5 6 7 8 9 10 11 12 13 require 'sinatra' enable : sessions get '/start' do session [ :message ] = 'Hello World!' # save in session redirect to ( '/another' ) # send resonse to browser # w/o session, immediate dispose the info, until end get 'another' do session [ :message ] # access session end 1 2 3 4 5 6 7 8 9 10 11 12 require 'sinatra' enable : sessions get '/set/:name' do session [ :message ] = params [ :name ] redirect to ( '/another' ) end get 'another' do \"Hello, #{ session [ :message ] } \" end add lingin using slim Destry session","title":"Sessions"},{"location":"2019-05-14/#deploying-the-application","text":"Heroku: PaaS Git Using Bundler telling Heroku what dependencies are needed bundler.io, gem install bundler Gemfile config.ru","title":"Deploying the application"},{"location":"2019-05-16/","text":"Ruby on Rails David Heinemeier Hansson MVC structure, difference from Sinatra Separated routes MVC Model View Controller Database: sqlite3 Create a new app 1 rails new app1 Routes -> Controller -> view Create new app 1 rails new [ name ] Generate components 1 rails generate controller [ folder ] [ page1 ] [ page2 ] Generate database 1 2 3 rails generate migration CreateProducts name:string part_num: integer rails db:migrate # create table","title":"Ruby on Rails"},{"location":"2019-05-16/#ruby-on-rails","text":"David Heinemeier Hansson MVC structure, difference from Sinatra Separated routes MVC Model View Controller Database: sqlite3 Create a new app 1 rails new app1 Routes -> Controller -> view Create new app 1 rails new [ name ] Generate components 1 rails generate controller [ folder ] [ page1 ] [ page2 ] Generate database 1 2 3 rails generate migration CreateProducts name:string part_num: integer rails db:migrate # create table","title":"Ruby on Rails"}]}